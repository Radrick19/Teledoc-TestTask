// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teledok.Domain;

#nullable disable

namespace Teledok.Domain.Migrations
{
    [DbContext(typeof(TeledokContext))]
    partial class TeledokContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Teledok.Domain.Models.Clients.IndividualPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncorporatorId")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IncorporatorId");

                    b.ToTable("IndividualPersons");
                });

            modelBuilder.Entity("Teledok.Domain.Models.Clients.LegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LegalEntities");
                });

            modelBuilder.Entity("Teledok.Domain.Models.Incorporator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Incorporators");
                });

            modelBuilder.Entity("Teledok.Domain.Models.LegalEntityIncorporator", b =>
                {
                    b.Property<int>("IncorporatorId")
                        .HasColumnType("int");

                    b.Property<int>("LegalEntityId")
                        .HasColumnType("int");

                    b.HasKey("IncorporatorId", "LegalEntityId");

                    b.HasIndex("LegalEntityId");

                    b.ToTable("LegalEntitiesIncorporators");
                });

            modelBuilder.Entity("Teledok.Domain.Models.Clients.IndividualPerson", b =>
                {
                    b.HasOne("Teledok.Domain.Models.Incorporator", "Incorporator")
                        .WithMany()
                        .HasForeignKey("IncorporatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incorporator");
                });

            modelBuilder.Entity("Teledok.Domain.Models.LegalEntityIncorporator", b =>
                {
                    b.HasOne("Teledok.Domain.Models.Incorporator", "Incorporator")
                        .WithMany("LegalEntities")
                        .HasForeignKey("IncorporatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teledok.Domain.Models.Clients.LegalEntity", "LegalEntity")
                        .WithMany("Incorporators")
                        .HasForeignKey("LegalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incorporator");

                    b.Navigation("LegalEntity");
                });

            modelBuilder.Entity("Teledok.Domain.Models.Clients.LegalEntity", b =>
                {
                    b.Navigation("Incorporators");
                });

            modelBuilder.Entity("Teledok.Domain.Models.Incorporator", b =>
                {
                    b.Navigation("LegalEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
